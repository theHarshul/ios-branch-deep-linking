#!/bin/bash
set -euo pipefail

# deploy-fabric  -  Deploys Branch.framework to Fabric
#
# Edward Smith, October 2016

scriptname=$(basename "BASH_SOURCE[0]")
scriptpath="${BASH_SOURCE[0]}"
scriptpath=$(cd "$(dirname "${scriptpath}")" && pwd)
cd ${scriptpath}/..

version=$(./scripts/version)

# This script assumes that the bash variable 'FABRIC_KEY' is defined in your .bashrc file.
if [ -z "${FABRIC_KEY+x}" ] || [ ${#FABRIC_KEY} = 0 ]; then
    echo ">>> Error: FABRIC_KEY not defined.  Define it in your .bashrc." 1>&2
    exit 1
fi


if [ ! -d Branch.framework ]; then
    echo ">>> Error: Can't find the Branch.framework file." 1>&2
    exit 1
fi


scriptFailed=1
function finish {
    if [ $scriptFailed -ne 0 ]; then
        echo ">>> Error: $scriptname failed!" 1>&2
        exit 1
    fi
}
trap finish EXIT


#  Archive the framework files into a zip file:
rm Branch.framework.zip || true
ditto -c -k -v -V --sequesterRsrc --keepParent Branch.framework  Branch.framework.zip


metadata=$(cat <<METADATA
{
     "description":     "Deep links to drive app installs, user engagement and retention across all channels"
    ,"friendly-name":   "Branch"
    ,"learn-more-url":  "https://dev.branch.io"
    ,"release-channel": "public"
}
METADATA
)

#  While testing the script, stop before uploading:
#echo $metadata
#exit 1

curl --fail -v -X PUT \
    -H "X-FabricKits-ApiKey: $FABRIC_KEY" \
    -F "release_metadata=$metadata; type=application/json" \
    -F "release_artifact=@Branch.framework.zip; type=application/octet-stream" \
    https://kits.fabric.io/manage-api/v1/kit-releases/ios/io.branch.sdk.ios/$version

open -a Fabric.app
echo ">>> Success!  Check the version in the Fabric.app" 1>&2
scriptFailed=0

